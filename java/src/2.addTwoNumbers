//2.两数相加
//给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。
//
//请你将两个数相加，并以相同形式返回一个表示和的链表。
//
//你可以假设除了数字0之外，这两个数都不会以0开头。
//
//
//
//示例1：
//
//
//输入：l1=[2,4,3],l2=[5,6,4]
//输出：[7,0,8]
//解释：342+465=807.
//示例2：
//
//输入：l1=[0],l2=[0]
//输出：[0]
//示例3：
//
//输入：l1=[9,9,9,9,9,9,9],l2=[9,9,9,9]
//输出：[8,9,9,9,0,0,0,1]
//
//
//提示：
//
//每个链表中的节点数在范围[1,100]内
//0<=Node.val<=9
//题目数据保证列表表示的数字不含前导零
//

//Definition for singly-linked list.
public class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = null, tail = null;
        int carry = 0;
        while (l1 != null || l2 != null) {
            int n1 = l1 != null ? l1.val : 0;
            int n2 = l2 != null ? l2.val : 0;
            int sum = n1 + n2 + carry;
            if (head == null) {
                head = tail = new ListNode(sum % 10);
            } else {
                tail.next = new ListNode(sum % );
                tail = tail.next; // 指针移动
            }
            carry = sum / 10;
            if (l1 != null) {
                l1 = l1.next; // 指针移动
            }
            if (l2 != null) {
                l2 = l2.next; // 指针移动
            }
        }
        if (carry > 0) {
            tail.next = new ListNode(carry);
        }
        return head.next;
        void print(ListNode p) {
            ListNode newNode = p;
            while (newNode != null) {
                println(newNode.val,"\n");
                newNode = newNode.next;
            }
        }
    }

    public static void main(string[] args)
    {
        System.out.println(args[0]);
        System.out.println(args[1]);
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(4);
        l1.next = new ListNode(3);
        print(l1);
    }
}


